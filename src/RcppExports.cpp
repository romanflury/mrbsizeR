// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dctMatrix
NumericMatrix dctMatrix(int n);
RcppExport SEXP _mrbsizeR_dctMatrix(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(dctMatrix(n));
    return rcpp_result_gen;
END_RCPP
}
// for_eigenLaplace
NumericVector for_eigenLaplace(NumericVector mu, NumericVector lambda, int mm, int nn);
RcppExport SEXP _mrbsizeR_for_eigenLaplace(SEXP muSEXP, SEXP lambdaSEXP, SEXP mmSEXP, SEXP nnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    rcpp_result_gen = Rcpp::wrap(for_eigenLaplace(mu, lambda, mm, nn));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mrbsizeR_dctMatrix", (DL_FUNC) &_mrbsizeR_dctMatrix, 1},
    {"_mrbsizeR_for_eigenLaplace", (DL_FUNC) &_mrbsizeR_for_eigenLaplace, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mrbsizeR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
